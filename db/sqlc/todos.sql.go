// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: todos.sql

package db

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (users_id, task, done)
VALUES ( $1, $2, $3) RETURNING id, users_id, task, done
`

type CreateTodoParams struct {
	UsersID int64  `json:"users_id"`
	Task    string `json:"task"`
	Done    bool   `json:"done"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, arg.UsersID, arg.Task, arg.Done)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UsersID,
		&i.Task,
		&i.Done,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE users_id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, usersID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, usersID)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, users_id, task, done FROM todos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UsersID,
		&i.Task,
		&i.Done,
	)
	return i, err
}

const listTodo = `-- name: ListTodo :many
SELECT id, users_id, task, done FROM todos
WHERE users_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTodoParams struct {
	UsersID int64 `json:"users_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListTodo(ctx context.Context, arg ListTodoParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodo, arg.UsersID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UsersID,
			&i.Task,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET task = $2, done = $3
WHERE id = $1
RETURNING id, users_id, task, done
`

type UpdateTodoParams struct {
	ID   int64  `json:"id"`
	Task string `json:"task"`
	Done bool   `json:"done"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.ID, arg.Task, arg.Done)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UsersID,
		&i.Task,
		&i.Done,
	)
	return i, err
}
